/*
Package sdk 是七牛官方的Go语言SDK

GO SDK 封装了七牛的API，提供了方便的类和工具，方便用户使用七牛的接口。
用户可以使用该SDK，使用七牛的Kodo(存储)， CDN， Dora(音视频处理)， SMS（短信）服务。

GO SDK 降低了客户直接使用七牛的接口的复杂度， 相比于用户直接请求接口，SDK给客户隐藏了
错误处理， 重试策略， 身份验证等底层处理过程。

GO SDK 在基本API请求的基础上， 进一步提供了一些我们认为有利于改善用户体验的方法。
比如在上传的过程中，对于比较大的文件，如视频文件，GO SDK会自动的选择适合的上传方法，
对于超过10M的文件，我们会使用并发的分片上传；小于10M的文件，我们会使用表单上传。
同时， GO SDK在上传的过程中会提供上传记录，方便用户实现上传进度条。

GO SDK 各个模块概览：

GO SDK主要分成两个大的组件， 一个是核心部分， 一个是服务客户端。
核心组件在包github.com/qiniu/go-sdk/qiniu中， 服务客户端组件
在github.com/qiniu/go-sdk/service包中。

    * qiniu - 该包提供了七牛GO SDK 核心部分的功能，包括配置Config, 日志Logger, 错误定义，
      请求处理， 响应处理等。 在qiniu包下又划分成数个功能模块，每个模块对应相应的功能。

        * qerr - 该包定义了Error interface, 所有的GO SDK的其他模块错误处理都会使用到该interface。
          Error 包括error code, error message, 和引起该错误的错误类型, error code总体定义了错误
          的分类，比如响应体反序列化错误， 鉴权错误。error message提供了详细的描述信息，最后是引起该错误
          的错误。

        * credentials - 该包提供了Provider接口， 用来获取密钥信息。通过该接口，可以从不同的途径获取密钥，
          比如从环境变量， 从配置文件， 从代码中直接提供，甚至从远程获得， 每种途径只需要定义符合该接口就可以。

        * session - 该包提供了初始的默认配置， 从默认的环境变量， 配置文件， 用户定义的配置文件加载配置，密钥信息。

        * request - 该包提供了请求处理， 请求重试等方法， 定义了Handler方便可以在请求处理的过程中，自定义处理。


    * service - 该包定义了七牛各个产品对应的请求客户端，包括CDN， Kodo, SMS, Dora。每个客户端可以有不同的request.Handler
                ，因此处理过程也不相同。


如何使用GO SDK

GO SDK使用七牛的服务，比如上传文件，获取统计信息等， 首先需要明确需要的服务是哪个客户端的， 比如上传文件是属于Kodo客户端。
明确好使用的服务客户端后，我们首先要创建一个Session结构体。
Session 提供了默认的Handlers, 默认的环境变量配置，默认的配置文件路径， 和默认的其他配置。
Session 可以在多个不同的服务客户端之间共享， 在创建Session的时候，用户可以定义自己的配置。

当Session创建好后，可以从创建后的session创建服务客户端， 然后通过服务客户端提交API请求。
*/
package sdk
